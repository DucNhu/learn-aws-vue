type UserModel @model @auth(rules: [{ allow: public }]) {
  id: ID!
  full_name: String
  avatar: String
  age: Int
  email: String
  gender: String
  birthday: String
  phone_number: String
  BlogModels: [BlogModel] @hasMany
  UntitledModels: [UntitledModel] @hasMany
}

type BlogModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public }
    ]
  ) {
  id: ID!
  title: String
  share: String
  status: Boolean
  TagModels: [TagModel] @manyToMany(relationName: "BlogModelTagModel")
  LikeModels: [LikeModel] @hasMany
  PhotoModels: [PhotoModel] @hasMany
  ReplyCommentModels: [ReplyCommentModel] @hasMany
}

type CommentModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public }
    ]
  ) {
  id: ID!
  content: String
  like: Int
  ReplyCommentModels: [ReplyCommentModel] @hasMany
  UserModel: UserModel @hasOne
}

type ReplyCommentModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public }
    ]
  ) {
  id: ID!
  content: String
  like: Int
  UserModel: UserModel @hasOne
}

type LikeModel
  @model
  @auth(
    rules: [
      { allow: groups, groups: ["Admin"], operations: [read, create, delete] }
      { allow: public, operations: [create, read, delete] }
    ]
  ) {
  id: ID!
  UserModel: UserModel @hasOne
}

type TagModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [create] }
    ]
  ) {
  id: ID!
  name: String
  blogmodels: [BlogModel] @manyToMany(relationName: "BlogModelTagModel")
}

type PhotoModel
  @model
  @auth(
    rules: [
      { allow: public }
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
    ]
  ) {
  id: ID!
  name: String
  desciption: String
  tagId: String
  view: Int
  status: Boolean
}

type UntitledModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [create, read, update] }
    ]
  ) {
  id: ID!
  name: String
  description: String
  UntitledFkModels: [UntitledFkModel] @hasMany
}

type UntitledFkModel
  @model
  @auth(
    rules: [
      {
        allow: groups
        groups: ["Admin"]
        operations: [read, create, update, delete]
      }
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  content: String!
}
